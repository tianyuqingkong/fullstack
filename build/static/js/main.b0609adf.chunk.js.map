{"version":3,"sources":["services/notes.js","components/note.js","components/notification.js","app.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","Note","note","toggleImportance","label","important","class","content","onClick","Notification","message","className","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","notesToShow","filter","map","key","find","changedNote","catch","error","setTimeout","n","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","onChange","target","value","type","ReactDOM","render","document","getElementById"],"mappings":"kOACMA,EAAU,kCAiBD,EAfA,WACX,OAAOC,IAAMC,IAAIF,GACRG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAaxB,EAVA,SAAAC,GACX,OAAOL,IAAMM,KAAKP,EAASM,GAClBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQxB,EALA,SAACG,EAAIF,GAChB,OAAOL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC5BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCFtBK,EAXJ,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,wBAAIC,MAAM,QACPJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCG3BK,EAXI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,yBAAKC,UAAU,SACZD,ICsFME,EAzFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEiBF,mBAAS,IAF1B,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,0BAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAadC,qBAPa,WACTC,IAEG7B,MAAK,SAAAC,GACJoB,EAASpB,QAGD,IAEhB,IA0CM6B,EAAcN,EAClBJ,EACAA,EAAMW,QAAO,SAAAvB,GAAI,OAAuB,IAAnBA,EAAKG,aAG5B,OAAO,6BACH,qCACA,kBAAC,EAAD,CAAcK,QAASU,IACvB,6BACI,4BAAQZ,QAAS,kBAAMW,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKM,EAAYE,KAAI,SAAAxB,GAAI,OACjB,kBAAC,EAAD,CACIyB,IAAKzB,EAAKH,GACVG,KAAMA,EACNC,iBAAkB,YA1CT,SAACJ,GACtB,IAAMG,EAAOY,EAAMc,MAAK,SAAA1B,GAAI,OAAIA,EAAKH,KAAOA,KACtC8B,EAAW,2BAAO3B,GAAP,IAAaG,WAAYH,EAAKG,YAE/CkB,EACQxB,EAAI8B,GACXnC,MAAK,SAAAC,GACJoB,EAASD,EAAMY,KAAI,SAAAxB,GAAI,OAAIA,EAAKH,KAAOA,EAAKG,EAAOP,SAEpDmC,OAAM,SAAAC,GACHV,EAAgB,SAAD,OACJnB,EAAKK,QADD,sCAGfyB,YAAW,WACTX,EAAgB,QACf,KACHN,EAASD,EAAMW,QAAO,SAAAQ,GAAC,OAAIA,EAAElC,KAAOA,SA0BHI,CAAiBD,EAAKH,WAK3D,0BAAMmC,SAjEM,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACf9B,QAASS,EACTsB,MAAM,IAAIC,MAAOC,cACjBnC,UAAWoC,KAAKC,SAAW,GAC3B3C,GAAIe,EAAM6B,OAAS,GAErBpB,EACQc,GACP3C,MAAK,SAAAC,GACJoB,EAASD,EAAM8B,OAAOjD,IACtBsB,EAAW,SAsDX,2BACI4B,SA7Bc,SAACV,GACvBlB,EAAWkB,EAAMW,OAAOC,QA6BhBA,MAAO/B,IAEX,4BAAQgC,KAAK,UAAb,W,MCpFZC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b0609adf.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/notes'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n            .then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n            .then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n            .then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    update\r\n}","import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important\r\n      ? 'make not important' : 'make important'\r\n  \r\n    return (\r\n      <li class=\"note\">\r\n        {note.content} \r\n        <button onClick={toggleImportance}>{label}</button>\r\n      </li>\r\n    )\r\n  }\r\n  export default Note","import React from 'react'\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n  export default Notification","import React, {useState, useEffect} from 'react'\r\nimport noteService from './services/notes'\r\nimport Note from './components/note'\r\nimport Notification from './components/notification'\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([]);\r\n    const [newNote, setNewNote] =  useState('')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState('some error happened...')\r\n\r\n    const hook = () =>  {\r\n        noteService\r\n          .getAll()\r\n          .then(response => {\r\n            setNotes(response)\r\n          }) \r\n    }\r\n    useEffect(hook, [])\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() < 0.5,\r\n            id: notes.length + 1,\r\n          }\r\n          noteService\r\n          .create(noteObject)\r\n          .then(response => {\r\n            setNotes(notes.concat(response))\r\n            setNewNote('')\r\n          })\r\n\r\n    }\r\n\r\n    \r\n    const toggleImportance = (id) => {\r\n        const note = notes.find(note => note.id === id)\r\n        const changedNote = {...note, important: !note.important}\r\n        \r\n        noteService\r\n        .update(id, changedNote)\r\n        .then(response => {\r\n          setNotes(notes.map(note => note.id !== id ? note : response))\r\n        })\r\n        .catch(error => {\r\n            setErrorMessage(\r\n              `Note '${note.content}' was already removed from server`\r\n            )\r\n            setTimeout(() => {\r\n              setErrorMessage(null)\r\n            }, 5000)\r\n            setNotes(notes.filter(n => n.id !== id))\r\n          })\r\n    }\r\n\r\n    const handleNoteChange  = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important === true)\r\n\r\n\r\n    return <div>\r\n        <h1>Notes</h1>\r\n        <Notification message={errorMessage}/>\r\n        <div>\r\n            <button onClick={() => setShowAll(!showAll)}>\r\n                show {showAll ? 'important' : 'all' }\r\n            </button>\r\n        </div>\r\n        <ul>\r\n            {notesToShow.map(note => \r\n                <Note \r\n                    key={note.id} \r\n                    note={note}\r\n                    toggleImportance={() => {toggleImportance(note.id)}}\r\n                />\r\n\r\n            )}\r\n        </ul>\r\n        <form onSubmit={addNote}>\r\n            <input\r\n                onChange={handleNoteChange} \r\n                value={newNote}\r\n            />\r\n            <button type='submit'>save</button>\r\n        </form>\r\n    </div>\r\n}\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport './index.css'\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}